require 'rails_helper'
require 'spec_helper'

RSpec.describe Vulnerability, type: :model do

  def expect_valid_nvd_url(url) 
    expect(url).to end_with("zip")
    expect(url).to start_with("https://")
    expect(url).to include("nvd.nist.gov")
  end

  describe ".get_nvd_url_for_year" do 
    it "returns valid url" do
      url = Vulnerability.get_nvd_url_for_year(2017)
      expect_valid_nvd_url(url)
      expect(url).to include("2017")
    end
  end  

  describe ".get_nvd_update_url" do 
    it "returns valid update url" do
      url = Vulnerability.get_nvd_update_url()
      expect_valid_nvd_url(url)
    end
  end  
  
  describe ".load_zip_content" do
    it "returns valid xml content for update" do
      content = Vulnerability.load_zip_content(Vulnerability.get_nvd_update_url())
      expect(content).to start_with("<?xml version='1.0' encoding='UTF-8'?>")
      expect(content).to end_with("</nvd>")
    end
  end

  describe ".load_zip_content" do
    it "returns valid xml content for year 2017" do
      content = Vulnerability.load_zip_content(Vulnerability.get_nvd_url_for_year(2017))
      expect(content).to start_with("<?xml version='1.0' encoding='UTF-8'?>")
      expect(content).to end_with("</nvd>")
    end
  end

  describe ".load_zip_content" do
    it "returns no content for invalid year" do
      content = Vulnerability.load_zip_content(Vulnerability.get_nvd_url_for_year(1980))
      expect(content).to be_empty
    end
  end

  describe ".parse_xml" do
    it "parses valid XML" do
      content = Vulnerability.load_zip_content(Vulnerability.get_nvd_update_url())
      cves = Vulnerability.parse_xml(content)
      expect(cves.count).to be(496)
      cves.each do |cve|
        expect(cve[:summary].length).to be_within(980).of(1000)
        expect(cve[:cve_id]).to match(/CVE-[\d]+-[\d]+/)
	expect(cve[:rejected].to_s).to match(/false|true/)
        expect(cve[:published].class).to be(DateTime)
        expect(cve[:modified].class).to be(DateTime)
        cve[:references].each do |link|
          expect(link).to start_with("http").or(start_with("ftp"))
        end
        expect(cve[:cpe]).to start_with("cpe:").or(eq(""))
        expect(cve[:cvss]).to match(/\d\.\d.+/).or(eq(""))
      end
    end
  end

  describe '.load_new_vulnerabilities_from_nvd' do
    it "loads new vulnerabilities" do
      expect(Vulnerability.count).to eq(0)
      Vulnerability.load_new_vulnerabilities_from_nvd()
      expect(Vulnerability.count).to eq(496)
      # Load again and the count shall not change
      Vulnerability.load_new_vulnerabilities_from_nvd()
      expect(Vulnerability.count).to eq(496)
    end
  end

  describe '.load_vulnerabilities_from_nvd_for_year' do
    it "loads new vulnerabilities for 2017" do
      expect(Vulnerability.count).to eq(0)
      Vulnerability.load_vulnerabilities_from_nvd_for_year(2017)
      expect(Vulnerability.count).to eq(4073)
      # Update them now
      Vulnerability.load_new_vulnerabilities_from_nvd()
      expect(Vulnerability.count).to eq(4157)
    end
  end
  

end
