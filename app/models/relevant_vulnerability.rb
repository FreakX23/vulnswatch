require 'set'

class RelevantVulnerability # Non ActiveRecord

  def self.users_systems(user)
    all_projects = user.projects

    systems = Set.new
    
    all_projects.each do |project|
      systems.merge(project.systems)
    end
    
    systems.to_a
  end

  def self.relevant_vulnerabilities(user)
    systems = users_systems(user)
    return Vulnerability.none if systems.empty?

    conditions =['']
    systems.each do |system|
      newpart = 'summary LIKE ?'
      conditions[0] =  conditions[0].empty? ? newpart : conditions[0] + ' OR ' + newpart
      conditions.push "%#{system}%"
    end    
    
    return Vulnerability.where(conditions).order(modified: :desc)
  end
  
  def self.affected_systems(vulnerability, user)
    systems = RelevantVulnerability.users_systems(user)
    summary = vulnerability.summary.downcase 
    res = []
    systems.each do |system|
      res.push system if summary.include? system.downcase
    end
    res
  end

  def self.projects_having_system(system, user)
    res = []
    user.projects.each do |project|
      res.push project if project.systems.include? system
    end
    res
  end


end

