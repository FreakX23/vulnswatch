require 'test_helper'

class RelevantVulnerabilityTest < ActiveSupport::TestCase

  def setup
    @user1 = User.new(name: "Test User", email: "test_user@ema.il", password: "123qwehello123harder", password_confirmation: "123qwehello123harder")
    @user1.save!
    @project1 = @user1.projects.build(name: "First project", systems_description: "X11, X.org")
    @user2 = User.new(name: "Another Test User", email: "another_test_user@ema.il", password: "123qwehello123harder", password_confirmation: "123qwehello123harder")
    @user2.save!
    @project2 = @user2.projects.build(name: "Second project", systems_description: "")
    @user3 = User.new(name: "Another Test User", email: "third_user@ema.il", password: "123qwehello123harder", password_confirmation: "123qwehello123harder")
    @user3.save!
    @project3 = @user3.projects.build(name: "Third project", systems_description: "nodoubles\nnodoubles")
    @v1 = Vulnerability.create(name: "v1", summary: "I affect X.org", affected_system: "")
    @v2 = Vulnerability.create(name: "v2", summary: "I affect X11", affected_system: "")
    @v3 = Vulnerability.create(name: "v3", summary: "I affect X.org and more", affected_system: "X11")
    @v4 = Vulnerability.create(name: "v4", summary: "X.org and more is affected by me when using perl", affected_system: "perl")
    @v5 = Vulnerability.create(name: "v5", summary: "X.org is affected by me", affected_system: "")
    @v6 = Vulnerability.create(name: "v6", summary: "X11", affected_system: "")
    @v7 = Vulnerability.create(name: "v7", summary: "X11 has bug", affected_system: "")
    @v8 = Vulnerability.create(name: "v8", summary: "bug in X11", affected_system: "")
    @v9 = Vulnerability.create(name: "v9", summary: "Nothing told about a system here", affected_system: "X11")

    @v10 = Vulnerability.create(name: "v10", summary: "Nothing told about a system here", affected_system: "X11 perl")
    @v11 = Vulnerability.create(name: "v11", summary: "Nothing told about a system here", affected_system: "X11 and perl")
    @v12 = Vulnerability.create(name: "v12", summary: "Nothing told about a system here", affected_system: "X11, perl")
    @v13 = Vulnerability.create(name: "v13", summary: "Nothing told about a system here", affected_system: "X11 something")
    @v14 = Vulnerability.create(name: "v14", summary: "Nothing told about a system here", affected_system: " X11")
    @v15 = Vulnerability.create(name: "v15", summary: "Nothing told about a system here", affected_system: "X11, x.org, perl")
  end

  def affects?(v, s)
    return RelevantVulnerability.vulnerability_affects_system?(v, s)
  end
  
  test "vulnerability affects system works" do
    # case tested
    assert affects?(@v1, "x.org")
    assert affects?(@v1, "X")
    assert affects?(@v1, "X.Org")
    assert affects?(@v1, "X.org")
    # other words
    assert affects?(@v1, "affect")
    assert affects?(@v1, "I")
    # irrelevant system
    assert_not affects?(@v1, "X11")
    # a word part
    assert_not affects?(@v1, "affe")
    assert_not affects?(@v1, "cts")
    
    # next vulneratbility
    assert affects?(@v2, "X11")
    assert_not affects?(@v2, "X.Org")
    # empty string
    assert_not affects?(@v2, "")
    
    # v3
    assert_not affects?(@v3, "x.org")
    assert affects?(@v3, "x11")
    
    # v4
    assert_not affects?(@v4, "x.org")
    assert_not affects?(@v4, "more")
    assert affects?(@v4, "perl")
    
    # beginning of the string
    assert affects?(@v5, "x.org")
    assert affects?(@v6, "x11")
    assert affects?(@v7, "x11")
    
    # end of the string
    assert affects?(@v8, "x11")

    # middle of the string
    assert affects?(@v8, "in")

    # different other tests
    assert affects?(@v9, "x11")
    
    # Multiple affected systems and strange user input
    assert affects?(@v10, "x11")
    assert affects?(@v10, "perl")
    assert affects?(@v10, "Perl")
    assert affects?(@v10, "X11")
    assert_not affects?(@v10, "erl")
    assert_not affects?(@v10, "11 pe")
    assert_not affects?(@v10, "told")

    assert affects?(@v11, "x11")
    assert affects?(@v11, "and")
    assert affects?(@v11, "perl")
    assert_not affects?(@v11, "Nothing")

    assert affects?(@v12, "x11")
    assert affects?(@v12, "perl")
    assert_not affects?(@v12, " ")
    assert_not affects?(@v12, ",")
    assert_not affects?(@v12, ", ")

    assert affects?(@v13, "x11")
    assert affects?(@v13, "something")
    assert_not affects?(@v13, "nothing")
    assert_not affects?(@v13, "")
    assert_not affects?(@v13, nil)

    assert affects?(@v14, "x11")
    assert affects?(@v14, " x11")
    assert_not affects?(@v14, "nothing")
    assert_not affects?(@v14, "here")

    assert affects?(@v15, "x11")
    assert affects?(@v15, " x.org")
    assert affects?(@v15, "perl")
    assert_not affects?(@v15, "about")
   
    assert_not affects?(nil, "system")    
    assert_not affects?(nil, nil)    

    
    
    
        
  end

  test "data is valid" do
    assert @user1.valid?
    assert @project1.valid?
    assert @user2.valid?
    assert @project2.valid?
    assert @user3.valid?
    assert @project3.valid?
    assert @v1.valid?
    assert @v2.valid?
    assert @v3.valid?
    assert @v4.valid?
    assert @v5.valid?
    assert @v6.valid?
    assert @v7.valid?
    assert @v8.valid?
    assert @v9.valid?
    assert @v10.valid?
    assert @v11.valid?
    assert @v12.valid?
    assert @v13.valid?
    assert @v14.valid?
    assert @v15.valid?
  end

  test "users systems works" do
    assert RelevantVulnerability.users_systems(@user1) == ["X11", "X.org"]
    assert RelevantVulnerability.users_systems(@user2) == []
    assert RelevantVulnerability.users_systems(@user3) == ["nodoubles"]
  end

end
