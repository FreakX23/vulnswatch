require 'test_helper'

class VulnerabilityTest < ActiveSupport::TestCase

  def setup
    @v1 = Vulnerability.create(name: "v1", summary: "I affect X.org", affected_system: "")
    @v2 = Vulnerability.create(name: "v1", summary: "I affect X11", affected_system: "")
    @v3 = Vulnerability.create(name: "", summary: "I affect X.org and more", affected_system: "X11")
    @v4 = Vulnerability.create(name: "v4", summary: "", affected_system: "perl")
  end

  test "data is valid" do
    assert @v1.valid?
    assert_not @v2.valid?
    assert_not @v3.valid?
    assert_not @v4.valid?
  end
  
  test "no duplicates allowed" do
    @v12 = Vulnerability.create(name: "v1", summary: "I am a duplicate")
    assert_not @v12.valid?
    assert @v12.errors[:name].include?("has already been taken")
  end
  
  test "add to database updating" do
    cve = { cve_id: "v1", summary: "I am a duplicate" }
    result = Vulnerability.add_to_database(cve)
    assert result == true
    assert_difference 'Vulnerability.count', 0 do
      assert Vulnerability.add_to_database(cve)
    end
  end

  test "add to database new and then update" do
    cve = { cve_id: "v2", summary: "I am a new vuln" }
    assert_difference 'Vulnerability.count', 1 do
      assert Vulnerability.add_to_database(cve)
    end
    # but not once again
    assert_difference 'Vulnerability.count', 0 do
      assert Vulnerability.add_to_database(cve)
    end
    # but not once again even when summary changes
    cve[:summary] = "New summary"
    assert_difference 'Vulnerability.count', 0 do
      assert Vulnerability.add_to_database(cve)
    end
    # ensure changed summary
    vuln = Vulnerability.find_by(name: cve[:cve_id])
    assert_not vuln.nil?
    assert vuln.name == cve[:cve_id]
  end

end
