require 'test_helper'

class VulnerabilityTest < ActiveSupport::TestCase

  def setup
    @user1 = User.new(name: "Test User", email: "test_user@ema.il", password: "123qwehello123harder", password_confirmation: "123qwehello123harder")
    @user1.save!
    @v1 = Vulnerability.create(name: "v1", summary: "I affect X.org")
    @v2 = Vulnerability.create(name: "v1", summary: "I affect X11")
    @v3 = Vulnerability.create(name: "", summary: "I affect X.org and more")
    @v4 = Vulnerability.create(name: "v4", summary: "")
  end

  test "data is valid" do
    assert @v1.valid?
    assert_not @v2.valid?
    assert_not @v3.valid?
    assert_not @v4.valid?
  end
  
  test "no duplicates allowed" do
    @v12 = Vulnerability.create(name: "v1", summary: "I am a duplicate")
    assert_not @v12.valid?
    assert @v12.errors[:name].include?("has already been taken")
  end
  
  test "add to database updating" do
    cve = { cve_id: "v1", summary: "I am a duplicate" }
    result = Vulnerability.add_to_database(cve)
    assert result == true
    assert_difference 'Vulnerability.count', 0 do
      assert Vulnerability.add_to_database(cve)
    end
  end

  test "add to database new and then update" do
    cve = { cve_id: "v2", summary: "I am a new vuln" }
    assert_difference 'Vulnerability.count', 1 do
      assert Vulnerability.add_to_database(cve)
    end
    # but not once again
    assert_difference 'Vulnerability.count', 0 do
      assert Vulnerability.add_to_database(cve)
    end
    # but not once again even when summary changes
    cve[:summary] = "New summary"
    assert_difference 'Vulnerability.count', 0 do
      assert Vulnerability.add_to_database(cve)
    end
    # ensure changed summary
    vuln = Vulnerability.find_by(name: cve[:cve_id])
    assert_not vuln.nil?
    assert vuln.name == cve[:cve_id]
  end

  test "unique index for name" do
    sql = "INSERT INTO vulnerabilities (name, summary, created_at, updated_at) VALUES ('Zaur', 'summary', '2017-01-01', '2017-01-01')"
    sql2 = "SELECT * FROM vulnerabilities WHERE name LIKE 'Zaur'"
    records_array = ActiveRecord::Base.connection.execute(sql)
    records_array = ActiveRecord::Base.connection.execute(sql2)
    assert records_array.count == 1
    assert_raises(Exception) {
      records_array = ActiveRecord::Base.connection.execute(sql)
    } 
  end

  test "filtering works" do
    vs=Vulnerability.filter({name: "v1"})
    assert vs.count == 1
    vs=Vulnerability.filter({name: "v2"})
    assert vs.count == 0
  end

  test "filtering prevents sqli" do
    assert Vulnerability.filter({name: "fake' OR id = 1;"}).count == 0 
    params = ActionController::Parameters.new({name: "v2", id: "1"})
    assert Vulnerability.filter(params).count == 0
  end
  
  test "filtering nothing works" do
    assert Vulnerability.filter({name: ""}).count == 1
    params = ActionController::Parameters.new({name: "v1"})
    res = Vulnerability.filter(params)
    assert res.count == 1
    params = ActionController::Parameters.new({name: "v2"})
    assert Vulnerability.filter(params).count == 0
    params = ActionController::Parameters.new({name: ""})
    assert Vulnerability.filter(params).count == 1
    params = ActionController::Parameters.new({})
    assert Vulnerability.filter(params).count == 1
  end
  
end
